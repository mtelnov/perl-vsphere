#!/usr/bin/perl

use strict;
use warnings;

use Data::Dumper;
use File::Basename qw{ basename };
use VMware::vSphere;
use VMware::vSphere::Const;
use VMware::vSphere::Simple;
use List::Util qw{ any };

show_usage() if not @ARGV;

# Shell completion
if ($ARGV[0] eq 'comp') {
    shift @ARGV;
    completion(@ARGV);
    exit 0;
}

my $v = vsphere(1);

my $method = shift @ARGV;
if (not $v->can($method)) {
    print STDERR "Error: Method '$method' not found.\n";
    show_usage();
}

# Resolve complex arguments
my @args;
for (@ARGV) {
    if (/^\{.*\}$/s or /^\[.*\]$/s) {
        no strict;
        no warnings;
        push @args, eval;
        use warnings;
        use strict;
        if ($@) {
            print STDERR "Error in argument '$_': $@\n";
            exit 1;
        }
    } else {
        push @args, $_;
    }
}

# Invoke the method
my @r = $v->$method(@args);
if (any { ref } @r) {
    $Data::Dumper::Terse = 1;
    $Data::Dumper::Sortkeys = 1;
    print Dumper(\@r);
} else {
    local $, = "\n";
    local $\ = "\n";
    print grep { defined } @r;
}
exit 0;

sub vsphere {
    my $verbose = shift;
    for (qw{ VSPHERE_HOST VSPHERE_USER VSPHERE_PASS }) {
        if (not defined $ENV{$_}) {
            print STDERR "Error: Required environment variable '$_'".
                         "isn't defined\n" if $verbose;
            exit 1;
        }
    }

    return VMware::vSphere::Simple->new(
        host => $ENV{VSPHERE_HOST},
        username => $ENV{VSPHERE_USER},
        password => $ENV{VSPHERE_PASS},
    );
}

sub list_methods {
    my %methods;
    no strict 'refs';
    for my $m (qw{ VMware::vSphere:: VMware::vSphere::Simple:: }) {
        for (keys %{$m}) {
            next unless defined &{"${m}$_"};
            next unless /^[a-z][a-z_]+/s;
            next if /^(?:carp|croak|confess|new|debug)$/s;

            $methods{$_} = 1;
        }
    }
    use strict 'refs';
    return sort keys %methods;
}

sub show_usage {
    print STDERR "vsphere - CLI for VMware::vSphere::Simple perl module\n",
                 "VMware::vSphere version is ", $VMware::vSphere::VERSION,
                 "\n\nUsage: ", basename($0),
                 " <METHOD> [[PARAMETER1] [PARAMETER2]...]\n\n",
                 "Available methods:\n";
    print STDERR "$_\n" for list_methods();
    print STDERR "\nPlease see man or perldoc VMware::vSphere::Simple\n";
    exit 64;
}

sub completion {
    my $i = shift;
    my $cur = $_[$i];
    my $prev = $_[$i-1];
    my $m = $_[1];

    local $, = q{ };

    if ($i == 1) {
        print list_methods();
        return 1;
    }

    if ($i == 2) {
        if ($m eq 'list') {
            print STDOUT VMware::vSphere::Const::MO_TYPES;
            return 1;
        }

        if ($m eq 'get_moid') {
            my $type = defined $_[3] ? $_[3] : 'VirtualMachine';
            eval { print vsphere()->list($type); };
            return 1;
        }

        if ($m eq 'get_datastore_url') {
            eval { print vsphere()->list('Datastore'); };
            return 1;
        }

        if (any { $_ eq $m } qw{
            get_vm_path get_vm_powerstate tools_is_running poweron_vm
            poweroff_vm shutdown_vm reboot_vm create_snapshot
            revert_to_current_snapshot reconfigure_vm connect_cdrom
            disconnect_cdrom connect_floppy disconnect_floppy create_disk
            remove_disk mount_tools_installer linked_clone
            }
        ) {
            eval { print vsphere()->list; };
            return 1;
        }

    }

    if ($i == 3) {
        if ($m eq 'get_moid') {
            print STDOUT VMware::vSphere::Const::MO_TYPES;
            return 1;
        }
    }

    return 1 if $i == 2 and $m eq 'remove_snapshot';

    if ($m eq 'add_nas_storage') {
        if ($prev eq 'access_mode') {
            print qw{ readWrite readOnly };
            return 1;
        }
        if ($prev eq 'type') {
            print qw{ NFS NFS41 CIFS };
            return 1;
        }
    }

    if ($m eq 'find_files') {
        if ($prev eq 'datastore') {
            eval { print vsphere()->list('Datastore'); };
            return 1;
        }
    }

    if ($m eq 'register_vm') {
        if ($prev eq 'datacenter') {
            eval { print vsphere()->list('Datacenter'); };
            return 1;
        }
        if ($prev eq 'cluster') {
            eval { print vsphere()->list('ClusterComputeResource'); };
            return 1;
        }
        if ($prev eq 'host') {
            eval { print vsphere()->list('HostSystem'); };
            return 1;
        }
    }

    my %proto = (
        create_snapshot => [qw{ name description memory quiesce }],
        remove_snapshot => [qw{ removeChildren consolidate }],
        create_disk => [qw{ size thin controller unit }],
        add_nas_storage => [qw{
            host_name remote_host remote_path local_path type access_mode
        }],
        find_files => [qw{ datastore pattern path case_sensitive }],
        register_vm => [qw{ datacenter cluster host path as_template }],
    );
    if (exists $proto{$m}) {
        print @{$proto{$m}}
            unless any { $prev eq $_ } @{$proto{$m}};
        return 1;
    }
}

__END__

=head1 NAME

vsphere - command line interface for VMware::vSphere::Simple perl module

=head1 SYNOPSIS

    vsphere <METHOD> [[PARAMETER1] [PARAMETER2]...]

    export VSPHERE_HOST=vc.example.com
    export VSPHERE_USER=root
    export VSPHERE_PASS=vmware

    vsphere shutdown_vm "My VM1"
    vsphere create_snapshot vm_name "My VM1" name "snapshot1"
    vsphere linked_clone "My VM1" "My VM2"
    vsphere poweron_vm "My VM2"

=head1 DESCRIPTION

This is a simple CLI utility to manage VMware vSphere services (vCenter or
ESXi). The utility makes login to vSphere service using credentials from
environment variables (VSPHERE_HOST, VSPHERE_USER, VSPHERE_PASS), performs the
specified method and makes logout on exit. It isn't effective if you perform
several methods in row. In this case use perl module L<VMware::vSphere::Simple>
directly.

Parameters are translating to perl data structures if it begins with C<[> and
C<{> and ends with C<]> or C<}> characters respectively.

=head1 ENVIRONMENT VARIABLES

=over

=item VSPHERE_HOST

Hostname or IP address of the VMware vSphere Web Service (vCenter or ESXi).

=item VSPHERE_USER

Username for login to the VMware vSphere Web Service.

=item VSPHERE_PASS

Password for login to the VMware vSphere Web Service.

=back

=head1 SEE ALSO

=over

=item L<VMware::vSphere>

Raw interface to VMware vSphere Web Services.

=item L<VMware::vSphere::Simple>

Simplifies common vSphere methods and makes it more perlish.

=item L<https://www.vmware.com/support/developer/vc-sdk/index.html>

Official VMware vSphere Web Services SDK Documentation.

=back


=head1 AUTHOR

Mikhail Telnov E<lt>Mikhail.Telnov@gmail.comE<gt>

=head1 COPYRIGHT

This software is copyright (c) 2016 by Mikhail Telnov.

This library is free software; you may redistribute and/or modify it
under the same terms as Perl itself.

=cut
